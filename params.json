{"name":"Monufacture","tagline":"A Python library for setting up Mongo documents for testing","body":"# Monufacture\r\n\r\nMonufacture is a simple test data factory framework for Python which aims to make it as easy as possible to setup and teardown predictable test data in Mongo as part of testing functional code. \r\n\r\nThe API borrows heavily from Thoughtbot's excellent [factory_girl](https://github.com/thoughtbot/factory_girl) gem for Ruby.\r\n\r\n[![build status](https://travis-ci.org/gamechanger/monufacture.png?branch=master \"Build status\")](https://travis-ci.org/gamechanger/monufacture)\r\n\r\n# Installation\r\n\r\nInstall via easy_install:\r\n```\r\neasy_install monufacture\r\n```\r\nOr, via pip:\r\n```\r\npip install monufacture\r\n```\r\n\r\n# Getting Started\r\n\r\nTo illustrate how to use Monufacture, let's imagine some dull application which uses MongoDB to power a blogging site. We want to test our site's pages to ensure that when we attempt to get a given page it loads the right data, when we attempt to save a new blog post the database is updated, etc. You get the idea.\r\n\r\nIn order to perform this sort of testing, we usually need some suitable test data in the database in order to run a test. Monufacture helps you do this. Its API provides two related capabilities:\r\n\r\n1. The ability to declare, in a nice, readable format, how to construct test documents. \r\n2. The ability to use these declared factories to effortlessly generate as many test documents as you need for your test.\r\n\r\n\r\nGoing back to our blogging application, let's image our database is pretty simple and has two collections: `user`, which holds user account information, and `blogpost` which contains all the data associated with a given post. \r\n\r\nIf we wanted to use Monufacture to generate test data for this application, we'd start off by declaring factories something like this:\r\n\r\n```python\r\ntrait(\"timestamped\", {                                              # Traits can be used to declare commonly \r\n    \"created\":  ago(days=1),                                        # used document content which we want to mix\r\n    \"modified\": date()                                              # into other documents.\r\n})\r\n\r\nwith factory(\"user\", db.users):                                     # Declare a factory, providing a name and a Mongo collection object\r\n\r\n    default({                                                       # Declare the default document for a factory\r\n        \"first_name\":   \"John\",\r\n        \"last_name\":    \"Smith\"\r\n        \"email\":    dependent(lambda u: \"{}.{}@test.com\".format(    # The \"dependent\" helper lets us\r\n                                            u['first_name'],        # set field values from other\r\n                                            u['last_name'])),       # field values.\r\n        \"password\": \"abc123\",\r\n    }, traits=[\"timestamped\"])\r\n\r\n    document(\"admin\", {                                             # In addition to the default factory we can declare\r\n        \"is_admin\": True                                            # additional named factories for special cases.\r\n    }, parent=\"default\")                                            # We can also inherit from the default.\r\n\r\n\r\nwith factory(\"blogpost\", db.blogpost):\r\n\r\n    default({\r\n        \"author\":       id_of(\"user\"),                              # Using id_of we can insert the id of another document\r\n        \"subject\":      random_text(length=100, spaces=True),       # We can generate random text to populate fields\r\n        \"content\":      random_text(length=1000, spaces=True),\r\n        \"published\":    ago(minutes=30),                            # We can generate a relative datetime\r\n    }, traits=[\"timestamped\"])\r\n\r\n    fragment(\"comment\", {                                           # We can declare reusable document fragments to be inserted into documents\r\n        \"commenter\":    {\r\n            \"name\":         random_text(spaces=True),\r\n            \"email\":        sequence(lambda n: \"commenter{}@test.com\".format(n)),\r\n            \"text\":         random_text(length=200)\r\n        }\r\n    })\r\n\r\n    document(\"with_comments\", {\r\n        \"comments\":     list_of(embed(\"comment\"), 10)               # Insert a list of 10 comment fragments\r\n    }, parent=\"default\")\r\n```\r\n\r\nWith these factories registered, we can then use them to generate and automatically teardown test data during testing:\r\n\r\n```python\r\nclass BloggingTestCase(TestCase):\r\n\r\n    def test_get(self):\r\n        # Create a valid blogpost and its dependencies in the DB\r\n        blogpost = create(\"blogpost\") \r\n        \r\n        # Now we can test our application GET method\r\n        response = app.get(\"/blogposts/{}\".format(blogpost[\"_id\"]))\r\n        self.assertEquals(response.code, 200)\r\n        self.assertEquals(response.body['subject'], blogpost['subject'])\r\n\r\n    def test_create(self):\r\n        # Builds a new blogpost documents without saving it.\r\n        # Here we're using the named \"with_comments\" document\r\n        new_post = build(\"blogpost\", \"with_comments\") \r\n        \r\n        # Test our application POST method saves the new document\r\n        response = app.post(\"/blogposts\", new_post)\r\n        self.assertEquals(response.code, 201)\r\n        self.assertNotNone(db.blogpost.find_one(response.body['_id']))\r\n\r\n    def test_index(self):\r\n        # Creates 5 blogposts in the database\r\n        blogposts = create_list(5, \"blogpost\")\r\n        \r\n        # Test we can get all of them\r\n        response = app.get('/blogposts')\r\n        self.assertEquals(response.code, 200)\r\n        self.assertEquals(len(response.body), 5)\r\n\r\n    def test_other_stuff(self):\r\n        # Override default factory-generated values\r\n        blogpost = create(\"blogpost\", subject=\"How I learnt to love Python\")\r\n\r\n        # Test we can get a post by subject\r\n        response = app.get('/blogposts?subject={}'.format(\r\n            urlencode(\"How I learnt to love Python\")))\r\n        self.assertEquals(response.code, 200)\r\n        self.assertEquals(response.body['_id'], blogpost['_id'])\r\n    \r\n    def tearDown(self):\r\n        # Clean up any test documents we created in the database after each test\r\n        cleanup()\r\n```\r\n\r\n# API Reference\r\n\r\n## Factory Declaration\r\n\r\nFactories are declared by calling the `monufacture.factory()` method using a `with` block. \r\n\r\nEach factory must be given a name and be provided with a PyMongo collection object which it will use to insert documents it creates.\r\n\r\nInside the factory's `with` block, the structure and attributes of the documents it will generate are declared using the `default`, `document`, `trait` and `fragment` methods (described in more detail below):\r\n```python\r\nfrom monufacture import factory, trait, embed, fragment, document, default\r\nfrom monugacture.helpers import date, ago, list_of, random_text\r\n\r\n\r\nwith factory(\"vehicle\", db.vehicles):   # All documents will be written to the \"vehicles\" collection in MongoDB.\r\n    trait(\"car\", {\r\n        \"wheels\":       4\r\n    })\r\n\r\n    trait(\"bike\", {\r\n        \"wheels\":       2\r\n    })\r\n\r\n    trait(\"new\", {\r\n        \"is_new\":       True\r\n        \"purchased\":    date()\r\n    })\r\n\r\n    trait(\"used\", {\r\n        \"is_new\":       False\r\n        \"num_owners\":   2\r\n        \"purchased\":    ago(years=1)\r\n        \"history\":      list_of(embed(\"service_record\"), 3)\r\n    })\r\n\r\n    fragment(\"service_record\", {\r\n        \"date\":         ago(months=3)\r\n        \"repairs\":      random_text(length=500, spaces=True)\r\n    })\r\n\r\n    default({\r\n        \"model\":        random_text(spaces=True)\r\n        \"price\":        1234.56\r\n    })\r\n\r\n    document(\"new_bmw_motorbike\", {\r\n        \"make\":         \"BMW\"\r\n    }, parent=\"default\", traits=[\"new\", \"bike\"])\r\n\r\n    document(\"used_jaguar_car\", {\r\n        \"make\":         \"Jaguar\"\r\n    }, parent=\"default\", traits=[\"used\", \"car\"])\r\n```\r\n\r\n### Documents\r\n\r\nDocuments are declared within factories and are ultimately what factories build. Any number of named document structures may declared within a single factory (e.g. to test different scenarios) but all declared documents must be valid for Mongo collection associated with the factory. \r\n\r\nTo declare a document, use the `document` method inside an enclosing `factory` declaration:\r\n```python\r\nfrom monufacture import document, factory\r\n\r\n\r\nwith factory(\"vehicle\", db.vehicles):\r\n    document(\"ford\", {\r\n        \"make\":     \"Ford\",\r\n        \"model\":    \"Taurus\"\r\n    })\r\n```\r\nThe above example declares a static document which when generated (see \"Using Factories\") will always contain the same two fields with the same values.\r\n\r\nTo make things a bit more interesting, Monufacture provides inline helper functions (see \"Helpers\") which can be used to dynamically generate field values:\r\n```python\r\nfrom monufacture import document, factory\r\nfrom monufacture.helpers import random_text\r\n\r\n\r\nwith factory(\"vehicle\", db.vehicles):\r\n    document(\"ford\", {\r\n        \"make\":     \"Ford\",\r\n        \"model\":    random_text()\r\n    })\r\n```\r\nThe above example factory would generate a different value for the `\"model\"` field each time a document is generated.\r\n\r\n#### The \"default()\" document\r\n\r\nWithin each factory, a single \"default\" document structure should be declared. This is usually the simplest, most generic version of a document which is likely to be useful in most test contexts:\r\n```python\r\nfrom monufacture import default, factory\r\nfrom monufacture.helpers import random_text\r\n\r\n\r\nwith factory(\"vehicle\", db.vehicles):\r\n    default({\r\n        \"make\":     random_text(),\r\n        \"model\":    random_text()\r\n    })\r\n```\r\n\r\n### Inheritance\r\nWhen declaring multiple flavours of a document in a factory, it's common to want to reuse a base document structure in many documents. For this, Monufacture allows document declarations to inherit from one another making this process nice and DRY.\r\n```python\r\nfrom monufacture import document, factory, default\r\n\r\n\r\nwith factory(\"vehicle\", db.vehicles):\r\n    default({\r\n        \"cc\":       1500\r\n    })\r\n\r\n    document(\"car\", {\r\n        \"wheels\":   4\r\n    }, parent=\"default\")        # Inherits fields from the default document\r\n\r\n    document(\"bike\", {\r\n        \"wheels\":   2\r\n    }, parent=\"default\")        # Inherits fields from the default document\r\n\r\n    document(\"mazda\", {\r\n        \"make\":     \"Mazda\"\r\n    }, parent=\"car\")            # Inherits from the \"car\" and default documents\r\n\r\n    document(\"mazda_mx5\", {\r\n        \"model\":    \"MX-5\"\r\n    }, parent=\"mazda\")          # Inherits from the \"mazda\", car\" and default documents\r\n```\r\nNote:\r\n - If a document redeclares a field already declared in a parent document, the child document's value wins.\r\n - Inheritance only works within the scope of a single factory. Cross-factory inheritance is not supported.\r\n\r\n\r\n### Traits\r\nTraits allow common sets field values to be declared separately and then \"mixed in\" to as many document declarations as needed. \r\n\r\nTraits may be declared globally so that they may be used within all factories, or scoped inside just one factory.\r\n\r\n```python\r\nfrom monufacture import trait, document, factory, default\r\nfrom monufacture.helpers import ago, random_text\r\n\r\n\r\n# Declare a global \"timestamped\" trait which can be used in any factory\r\ntrait(\"timestamped\", {\r\n    \"created\":      ago(weeks=2),\r\n    \"modified\":     ago(minutes=1)\r\n})\r\n\r\nwith factory(\"vehicle\", db.vehicles):\r\n    \r\n    # Declare some reusable traits \r\n    trait(\"honda\", {\"make\": \"Honda\"})\r\n    trait(\"bmw\", {\"make\": \"BMW\"})\r\n    trait(\"bike\", {\"wheels\": 2})\r\n    trait(\"car\", {\"wheels\": 4})m\r\n\r\n    # Declare various documents by mixing up combinations of traits\r\n    document(\"bmw_bike\", traits=[\"bmw\", \"bike\", \"timestamped\"])\r\n    document(\"honda_bike\", traits=[\"honda\", \"bike\", \"timestamped\"])\r\n    document(\"bmw_car\", traits=[\"bmw\", \"car\", \"timestamped\"])\r\n    document(\"honda_car\", traits=[\"honda\", \"car\", \"timestamped\"])\r\n\r\nwith factory(\"customer\", db.customers):\r\n    default({\r\n        \"name\":     random_text(),\r\n        \"address:   {\r\n            \"line_1\":   random_text(),\r\n            \"line_2\":   random_text(),\r\n            \"zip\":      random_text(digits=True, length=5)\r\n        }\r\n    }, traits=[\"timestamped\"])  # \"timestamped\" trait used in multiple places\r\n```\r\nNote:\r\n - In the event a trait and the document referring to that trait declare the same field, the document's definition takes precedence.\r\n\r\n\r\n### Fragments\r\nFragments are a bit like traits in that they allow reusable, well, fragments to be declared separately and then included in multiple document declarations. However, whereas traits get \"mixed in\" to a document, fragments are designed to be embedded into a document at a certain insertion point using the `embed` function.\r\n\r\n```python\r\nfrom monufacture import trait, document, factory, default, fragment, embed\r\nfrom monufacture.helpers import ago, random_text, list_of\r\n\r\n\r\nwith factory(\"vehicle\", db.vehicles):\r\n    # Declare an \"owner\" fragment we can use in multiple places\r\n    fragment(\"owner\", {\r\n        \"name\":             random_text(),\r\n        \"purchased\":        ago(weeks=random_number(max=200))\r\n    })\r\n\r\n    # Now declare a document where we use the \"owner\" fragment to\r\n    # embed details of a current owner and a list of previous owners.\r\n    default({\r\n        \"make\":             random_text(),\r\n        \"model\":            random_text(),\r\n        \"current_owner\":    embed(\"owner\")\r\n        \"previous_owners\":  list_of(embed(\"owner\"), 3)\r\n    })\r\n```\r\n\r\nFragments may be used inside traits:\r\n```python\r\nwith factory(\"vehicle\", db.vehicles):\r\n    # Declare an \"owner\" fragment we can use in multiple places\r\n    fragment(\"owner\", {\r\n        \"name\":             random_text(),\r\n        \"purchased\":        ago(weeks=random_number(max=200))\r\n    })\r\n\r\n    trait(\"preowned\", {\r\n        \"previous_owners\":  list_of(embed(\"owner\"), 3)\r\n    })\r\n\r\n    # Now declare a document where we use the \"owner\" fragment to\r\n    # embed details of a current owner and a list of previous owners.\r\n    default({\r\n        \"make\":             random_text(),\r\n        \"model\":            random_text(),\r\n        \"current_owner\":    embed(\"owner\", purchased=date())\r\n    }, traits=[\"preowned\"])\r\n```\r\n\r\nFragments also support inheritance in the same manner as documents:\r\n```python\r\nwith factory(\"vehicle\", db.vehicles):\r\n    fragment(\"identity\", {\r\n        \"id\":               object_id()\r\n    })\r\n\r\n    # Declare an \"owner\" fragment we can use in multiple places\r\n    fragment(\"owner\", {\r\n        \"name\":             random_text(),\r\n        \"purchased\":        ago(weeks=random_number(max=200))\r\n    }, parent=\"identity\")\r\n\r\n```\r\n\r\nNotes:\r\n - Fragments must be declared inside the scope of a `with factory():` block. Global fragments are not supported.\r\n\r\n\r\n\r\n## Helpers\r\n\r\nHelpers are useful placeholder functions which can be used to insert generated data into documents at _build time_.\r\n\r\nAt their most basic level, helpers allow you to generate simple primitive values for fields (e.g. `random_text`). However, some of the more sophisticated helpers allow to you declare large document structures and satisfy dependencies between collections with the minimum of effort.\r\n\r\nAll helpers live in the `monufacture.helpers` module.\r\n\r\n---\r\n\r\n### `sequence([fn])`\r\n\r\nDefines a sequential value for a document attribute. On each successive invocation of this helper (i.e. when a new instance of a document is created by the enclosing factory) the given function is passed a sequentially incrementing number which should be used to return a dynamic value to be used on the model instance.\r\n\r\nWhen used without passing a function, this helper just inserts the raw sequence number into the document.\r\n\r\n#### Arguments\r\n\r\n| Argument | Description |\r\n| -------- | ----------- |\r\n| `fn(n)`  | A function/lambda which returns a value based on the given sequence value. *Optional* |\r\n\r\n#### Example\r\n```python\r\nfrom monufacture.helpers import sequence\r\n\r\n\r\n# Generate a unique email address for each created user.\r\ndocument(\"user\", {\r\n    \"email\": sequence(lambda n: \"user{}@test.com\".format(n))\r\n})\r\n```\r\n\r\n---\r\n\r\n### `dependent(fn)`\r\n\r\nAllows a dependent value to be dynamically generated from the value(s) of other attributes in the document. \r\n\r\n#### Arguments\r\n\r\n| Argument | Description |\r\n| -------- | ----------- |\r\n| `fn(doc)` | A function/lambda which returns a value based on other value(s) found on the provided document node. The provided `doc` node is the node is the document on which the field being set lives. |\r\n\r\n#### Example\r\n```python\r\nfrom monufacture.helpers import dependent\r\n\r\n\r\ndocument(\"user\", {\r\n    \"first\":    \"John\",\r\n    \"last\":     \"Smith\",\r\n    \"email\":    dependent(lambda doc: \"{}{}@test.com\".format(doc['first'], doc['last']))\r\n})\r\n```\r\nTip: The document object passed to your generator function has a `head` attribute which refers back to the root of the document. This is particularly useful if you need to insert a dependent value, which refers to a non-sibling field, into a nested portion of your document.\r\n\r\n---\r\n\r\n### `id_of(factory, [document], **overrides)`\r\n\r\nCreates a document in the database using the given factory (and optional document name) and then inserts the _id of the created document as the value of the referring field. This is a particularly effective way to effortlessly create a hierarchy of dependent documents for testing purposes. Simply declaring a document's dependency in this way will result in that dependency being created at build time. Yay!\r\n\r\nYou can also provide overrides to the document being created which can either be literals or functions evaluated on creation.\r\n\r\n#### Arguments\r\n\r\n| Argument | Description |\r\n| -------- | ----------- |\r\n| `factory`  | The name of the factory to use to create the depended-on document. | \r\n| `document` | The named document within the factory to create. If not provided the default document is created. *Optional* |\r\n| `**overrides` | Override field values to be passed to the document being created. Values can be literals or functions. Functions are passed the current node (in a similar manner to the dependency helper) and must return a literal value.|\r\n\r\n#### Example\r\n```python\r\nfrom monufacture.helpers import id_of, random_text, list_of\r\n\r\n\r\nwith factory(\"team\", db.teams):\r\n    default({\r\n        \"name\":             random_text(),\r\n        \"players\":          list_of(random_text(), 11)\r\n    })\r\n\r\n\r\n# When a \"game\" is created, we'll also create two teams and reference them by _id\r\nwith factory(\"game\", db.games):\r\n    default({\r\n        \"home_team_id\":     id_of(\"team\")\r\n        \"away_team_id\":     id_of(\"team\")\r\n    })\r\n\r\n# We could also provide an override for each team name as appropriate\r\nwith factory(\"game\", db.games):\r\n    default({\r\n        \"home_team_name\":   text(),\r\n        \"away_team_name\":   text(),\r\n        \"home_team_id\":     id_of(\"team\", name=lambda node: node['home_team_name'])\r\n        \"away_team_id\":     id_of(\"team\", name=lambda node: node['away_team_name'])\r\n    })\r\n```\r\n\r\n---\r\n\r\n### `dbref_to(factory, [document], **overrides)`\r\n\r\nVery similar to the `id_of` helper, only the inserted reference to the created document is a MongoDB DBRef structure rather than just an _id. \r\n\r\n#### Arguments\r\n\r\n| Argument | Description |\r\n| -------- | ----------- |\r\n| `factory`  | The name of the factory to use to create the depended-on document. | \r\n| `document` | The named document within the factory to create. If not provided the default document is created. *Optional* |\r\n| `**overrides` | Override field values to be passed to the document being created. Values can be literals or functions. Functions are passed the current node (in a similar manner to the dependency helper) and must return a literal value.|\r\n\r\n#### Example\r\n```python\r\nfrom monufacture.helpers import dbref_to, random_text, list_of\r\n\r\n\r\nwith factory(\"team\", db.teams):\r\n    default({\r\n        \"name\":             random_text(),\r\n        \"players\":          list_of(random_text(), 11)\r\n    })\r\n\r\n\r\n# When a \"game\" is created, we'll also create two teams and reference them by _id\r\nwith factory(\"game\", db.games):\r\n    default({\r\n        \"home_team\":     dbref_to(\"team\", league=\"NL\")\r\n        \"away_team\":     dbref_to(\"team\")\r\n    })\r\n```\r\n\r\n---\r\n\r\n### `random_text([[[[[[length], spaces], digits], upper], lower], other_chars])`\r\n\r\n*Alias*: `text`\r\n\r\nInserts a random piece of text adhereing the provided criteria.\r\n\r\n#### Arguments\r\n\r\n| Argument | Description |\r\n| -------- | ----------- |\r\n| `length`      | The length of the string to return. *Default: 10*. *Optional* |\r\n| `spaces`      | Include spaces? *Default: False*. *Optional* |\r\n| `digits`      | Include numeric digits? *Default: False*. *Optional* |\r\n| `upper`       | Include uppercase characters? *Default: True*. *Optional* |\r\n| `lower`       | Include lowercase characters? *Default: True*. *Optional* |\r\n| `other_chars` | A list of other characters to include (e.g. `[\".\", \"?\"]`). *Optional* |\r\n\r\n#### Example\r\n```python\r\nfrom monufacture.helpers import random_text\r\n\r\n\r\ndocument(\"blogpost\", {\r\n    \"subject\":  random_text(spaces=True, length=200),\r\n    \"content\":  random_text(spaces=True, length=1000, other_chars=[\".\"] \r\n})\r\n\r\n```\r\n\r\n---\r\n\r\n### `random_number(max)`\r\n### `random_number(min, max)`\r\n\r\n*Alias*: `number`\r\n\r\nInserts an integer in the given range into the document.\r\n\r\n#### Arguments\r\n\r\n| Argument | Description |\r\n| -------- | ----------- |\r\n| `min`      | Minimum value of inserted integer. *Default: 10*. *Optional*  |\r\n| `max`      | Maximum value of inserted integer |\r\n\r\n#### Example\r\n```python\r\nfrom monufacture.helpers import number\r\n\r\n\r\ndocument(\"user\", {\r\n    \"age\":  number(18, 35)\r\n})\r\n\r\n```\r\n\r\n---\r\n\r\n### `date([[[[[[[year], month], day], hour], minute], second], microsecond])`\r\n\r\nInserts a datetime object set to the given time/date. If no arguments are provided, the current datetime is inserted.\r\n\r\n#### Arguments\r\n\r\n| Argument | Description |\r\n| -------- | ----------- |\r\n| year          | The year. *Optional*        | \r\n| month         | The month. *Optional*       | \r\n| day           | The day. *Optional*         | \r\n| hour          | The hour. *Optional*        | \r\n| minute        | The minute. *Optional*      |     \r\n| second        | The second. *Optional*      |     \r\n| microsecond   | The microsecond. *Optional* |                 \r\n\r\n#### Example\r\n```python\r\nfrom monufacture.helpers import date\r\n\r\n\r\ndocument(\"blogpost\", {\r\n    \"published\":        date(2010, 2, 3, 4, 5, 6),  # A specific date\r\n    \"last_viewed\":      date()                      # Right now\r\n})\r\n\r\n```\r\n\r\n---\r\n\r\n### `now()`\r\n\r\nInserts the current datetime. This is essentially the same as using the `date()` helper with no arguments.\r\n\r\n#### Example\r\n```python\r\nfrom monufacture.helpers import date\r\n\r\n\r\ndocument(\"blogpost\", {\r\n    \"published\":        now()\r\n})\r\n\r\n```\r\n\r\n---\r\n\r\n### `ago([[[[[[[years], months], days], hours], minutes], seconds], microseconds])`\r\n\r\nInserts a datetime set to a date and time a given period before the current date time. Remember, this helper is evaluated at build time, not declaration time. \r\n\r\n#### Arguments\r\n\r\n| Argument | Description |\r\n| -------- | ----------- |\r\n| years        | The years to include in the delta. *Optional*        | \r\n| months       | The months to include in the delta. *Optional*       | \r\n| days         | The days to include in the delta. *Optional*         | \r\n| hours        | The hours to include in the delta. *Optional*        | \r\n| minutes      | The minutes to include in the delta. *Optional*      |     \r\n| seconds      | The seconds to include in the delta. *Optional*      |     \r\n| microseconds | The microseconds to include in the delta. *Optional* | \r\n\r\n#### Example\r\n```python\r\nfrom monufacture.helpers import ago\r\n\r\n\r\ndocument(\"blogpost\", {\r\n    \"published\":        ago(hours=1, minutes=30)\r\n})\r\n```\r\n\r\n---\r\n\r\n### `from_now([[[[[[[years], months], days], hours], minutes], seconds], microseconds])`\r\n\r\nInserts a datetime set to a date and time a given period after the current date time. Remember, this helper is evaluated at build time, not declaration time. \r\n\r\n#### Arguments\r\n\r\n| Argument | Description |\r\n| -------- | ----------- |\r\n| years        | The years to include in the delta. *Optional*        | \r\n| months       | The months to include in the delta. *Optional*       | \r\n| days         | The days to include in the delta. *Optional*         | \r\n| hours        | The hours to include in the delta. *Optional*        | \r\n| minutes      | The minutes to include in the delta. *Optional*      |     \r\n| seconds      | The seconds to include in the delta. *Optional*      |     \r\n| microseconds | The microseconds to include in the delta. *Optional* | \r\n\r\n#### Example\r\n```python\r\nfrom monufacture.helpers import from_now\r\n\r\n\r\ndocument(\"credit_card\", {\r\n    \"expires\":        from_now(years=1, months=2)\r\n})\r\n```\r\n\r\n---\r\n\r\n### `list_of(fn, length)`\r\n\r\nUsed to insert a list of the given length containing the results of invoking a given other helper multiple times. Can be used together with the `embed` helper to insert multiple copies of a fragment as an embedded collection. \r\n\r\n#### Arguments\r\n\r\n| Argument | Description |\r\n| -------- | ----------- |\r\n| fn       | A call to another helper function which will be used to yield the content of each list entry. |\r\n| length   | The length of the required list. The given wrapped helper will be invoked this many times. |\r\n\r\n#### Example\r\n```python\r\nfrom monufacture.helpers import list_of\r\n\r\n\r\nfragment(\"player\", {\r\n    \"name\":         random_text(),\r\n    \"number\":       sequence()\r\n})\r\n\r\ndocument(\"team\", {\r\n    \"players\":      list_of(embed(\"player\"), 11)\r\n    \"coaches\":      list_of(random_text(), 3)\r\n})\r\n```\r\n\r\n---\r\n\r\n### `object_id()`\r\n\r\nGenerates and inserts a new BSON ObjectId at build time. \r\n\r\n#### Example\r\n```python\r\nfrom monufacture.helpers import object_id\r\n\r\n\r\ndocument(\"blogpost\", {\r\n    \"_id\":  object_id()\r\n})\r\n\r\n```\r\n\r\n---\r\n\r\n### `union(*fns)`\r\n\r\nAllows the list output of other helper function calls (e.g. `list_of`) to be unioned into a single list at build time. \r\n\r\n#### Arguments\r\n\r\n| Argument | Description |\r\n| -------- | ----------- |\r\n| `*fns`   | A list of calls to other helper functions, all of which must output lists. |\r\n\r\n#### Example\r\n```python\r\nfrom monufacture.helpers import union\r\n\r\n\r\nfragment(\"player\", {\r\n    \"name\":         random_text(),\r\n    \"number\":       sequence()\r\n})\r\n\r\nfragment(\"injured_player\", {\r\n    \"is_injured\":   True\r\n}, parent=\"player\")\r\n\r\ndocument(\"team\", {\r\n    \"players\":      union(list_of(embed(\"player\"), 8), list_of(embed(\"injured\"), 3))\r\n})\r\n```\r\n\r\n---\r\n\r\n### `one_of(*values)`\r\n\r\nAllows a list of possible value to be provided for a field. At build time one of the supplied values will be picked at random and inserted. \r\n\r\n#### Arguments\r\n\r\n| Argument | Description |\r\n| -------- | ----------- |\r\n| *values  | The list of possible values the intended field can take. |\r\n\r\n#### Example\r\n```python\r\nfrom monufacture.helpers import one_of\r\n\r\n\r\ndocument(\"user\", {\r\n    \"status\":       one_of('NEW', 'ACT', 'DEL')\r\n})\r\n\r\n```\r\n\r\n\r\n## Writing Custom Helpers\r\n\r\nAs well as the out-of-the-box helpers documented in the previous section, you are of course free to implement your own custom helpers to meet the needs of you specific business domain. \r\n\r\nImplementing a custom helper couldn't be easier. A helper is just a function that accepts whatever specific arguments it needs and returns a function to be called at build time which should return the actual value to be inserted in the document. The returned function should accept the document as its only argument.\r\n\r\n### Example\r\n```python\r\n# A custom helper which inserts a token\r\ndef token():\r\n    def build(obj):\r\n        return str(uuid.uuid4().hex)\r\n\r\n    return build\r\n```\r\n\r\n\r\n## Using Factories\r\n\r\nOnce some factories have been declared, Monufacture let's you use factories to generate documents via two main routes: \"building\" and \"creating\".\r\n\r\n### Building Documents\r\n\r\n\"Building\" a document means generating an instance using the factory without saving it in the database. Building supports a variety of options:\r\n\r\n```python\r\nfrom monufacture import build, build_list\r\n\r\n\r\n# Build the default document from the \"car\" factory\r\ncar = build(\"car\")\r\n\r\n\r\n# Build the \"mazda\" document from the \"car\" factory\r\nmazda = build(\"car\", \"mazda\")\r\n\r\n\r\n# Build the default document from the \"car\" factory overriding the value for the \"wheels\" attribute\r\nthree_wheeler = build(\"car\", wheels=3)\r\n\r\n\r\n# Build a list of 5 cars\r\ncars = build_list(5, \"car\")\r\n\r\n\r\n# Build a list of 10 mazdas\r\nmazdas = build_list(10, \"car\", \"mazda\")\r\n\r\n\r\n# Build a list of 7 cars, overriding the \"wheels\" attribute on each\r\nthree_wheelers = build_list(7, \"car\", wheels=3)\r\n\r\n```\r\nNote:\r\n - Overrides will be inserted into the document whether the given attribute already exists or not. \r\n\r\n\r\n### Creating Documents\r\n\r\nThe API for \"creating\" document is essentially identical to that for \"building\", the only difference is that when creating a document, it is inserted into the MongoDB collection associated with the factory and is given an `_id`. \r\n\r\n```python\r\nfrom monufacture import create, create_list\r\n\r\n\r\n# Create the default document from the \"car\" factory\r\ncar = create(\"car\")\r\n\r\n\r\n# Create the \"mazda\" document from the \"car\" factory\r\nmazda = create(\"car\", \"mazda\")\r\n\r\n\r\n# Create the default document from the \"car\" factory overriding the value for the \"wheels\" attribute\r\nthree_wheeler = create(\"car\", wheels=3)\r\n\r\n\r\n# Create a list of 5 cars\r\ncars = create_list(5, \"car\")\r\n\r\n\r\n# Create a list of 10 mazdas\r\nmazdas = create_list(10, \"car\", \"mazda\")\r\n\r\n\r\n# Create a list of 7 cars, overriding the \"wheels\" attribute on each\r\nthree_wheelers = build_list(7, \"car\", wheels=3)\r\n```\r\n\r\n### Cleanup\r\n\r\nTypically, test documents are created in the context of a unit test and are no longer of use after that test has completed. \r\n\r\nTo ensure the created test documents are cleared up, use the `cleanup` method from you test's tearDown method:\r\n\r\n```python\r\nfrom unittest import TestCase\r\nfrom monufacture import create, cleanup\r\n\r\n\r\nclass BlogpostTestCase(TestCase):\r\n    \r\n    def test_something(self):\r\n        post = create(\"blogpost\")\r\n        # do some testing\r\n\r\n    def tearDown(self)\r\n        cleanup()\r\n```\r\n\r\n### Debugging\r\n\r\nMonufacture has some basic debug logging which can be turned on from your test to aid debugging. \r\n\r\n```python\r\nimport monufacture\r\n\r\nmonufacture.debug = True\r\n```\r\n\r\nDebug logging currently outputs a log entry each time a document is created.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}